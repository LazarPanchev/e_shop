<?php

namespace AppBundle\Repository;

use AppBundle\AppBundle;
use AppBundle\Entity\Tyre;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Mapping;

/**
 * TyreRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TyreRepository extends EntityRepository
{
    /**
     * UserRepository constructor.
     * @param EntityManagerInterface $em
     */
    public function __construct(EntityManagerInterface $em)
    {
        parent::__construct($em,
            new Mapping\ClassMetadata(Tyre::class));
    }

    /**
     * @param Tyre $tyre
     */
    public function save(Tyre $tyre){
        $this->_em->persist($tyre);
        $this->_em->flush();
    }

    /**
     * @param Tyre $tyre
     */
    public function remove(Tyre $tyre){
        $this->_em->remove($tyre);
        $this->_em->flush();
    }

    public function findTyresInCart($cartId){
        $query=$this->createQueryBuilder('c')
            ->select('c')
            ->from('AppBundle:Tyre','tyre')
            ->innerJoin('c.carts', 'carts')
            ->where('carts.id = :cartId')
            ->setParameter('cartId',$cartId)
            ->orderBy('c.dateAdded', 'ASC')
            ->getQuery();
        return $query->getResult();
    }

    public function findAllWithPromotions()
    {
        $query =$this->_em->createQueryBuilder()
            ->select('tyre,seller,category,promotions,promotionsTyres')
            ->from('AppBundle:Tyre','tyre')
            ->leftJoin('tyre.category','category')
            ->leftJoin('tyre.seller','seller')
            ->leftJoin('seller.promotions','promotions')
            ->leftJoin('promotions.promotionsTyres','promotionsTyres')
            ->getQuery();

        return $query->getResult();
    }

    public function findAllWithPromotionsByUserId($userId)
    {
        $query =$this->_em->createQueryBuilder()
            ->select('tyre,seller,category,promotions,promotionsTyres')
            ->from('AppBundle:Tyre','tyre')
            ->where('tyre.seller = :userId')
            ->setParameter('userId',$userId)
            ->leftJoin('tyre.category','category')
            ->leftJoin('tyre.seller','seller')
            ->leftJoin('seller.promotions','promotions')
            ->leftJoin('promotions.promotionsTyres','promotionsTyres')
            ->getQuery();

        return $query->getResult();
    }

    /**
     * @param $id
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findTyreWithPromotions($id)
    {
        $query =$this->_em->createQueryBuilder()
            ->select('tyre,seller,category,promotions,promotionsTyres')
            ->from('AppBundle:Tyre','tyre')
            ->where('tyre.id = :id')
            ->setParameter('id',$id)
            ->leftJoin('tyre.category','category')
            ->leftJoin('tyre.seller','seller')
            ->leftJoin('seller.promotions','promotions')
            ->leftJoin('promotions.promotionsTyres','promotionsTyres')
            ->getQuery();

        return $query->getSingleResult();
    }

    /**
     * @param $tyreId
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOneWithPromotionsAndComments($tyreId)
    {
        $query =$this->_em->createQueryBuilder()
            ->select('tyre,seller,comments,category,promotions,promotionsTyres')
            ->from('AppBundle:Tyre','tyre')
            ->where('tyre.id = :id')
            ->setParameter('id',$tyreId)
            ->leftJoin('tyre.comments','comments')
            ->leftJoin('tyre.category','category')
            ->leftJoin('tyre.seller','seller')
            ->leftJoin('seller.promotions','promotions')
            ->leftJoin('promotions.promotionsTyres','promotionsTyres')
            ->orderBy('comments.dateAdded', 'DESC')
            ->getQuery();

        return $query->getSingleResult();
    }

}
